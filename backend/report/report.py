from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.database import get_scan_by_id, get_vulnerability_by_scan_id

class Report:
    def __init__(self, filename):
        self.filename = filename
        self.doc = SimpleDocTemplate(filename, pagesize=letter)
        self.styles = getSampleStyleSheet()
        self.elements = []

    def add_title(self, title):
        self.elements.append(Paragraph(title, self.styles['Title']))
        self.elements.append(Spacer(1, 12))

    def add_heading(self, heading):
        self.elements.append(Paragraph(heading, self.styles['Heading1']))
        self.elements.append(Spacer(1, 12))

    def add_paragraph(self, text):
        self.elements.append(Paragraph(text, self.styles['Normal']))
        self.elements.append(Spacer(1, 12))

    def add_table(self, data, col_widths):
        table = Table(data, colWidths=col_widths)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 14),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 12),
            ('TOPPADDING', (0, 1), (-1, -1), 6),
            ('BOTTOMPADDING', (0, 1), (-1, -1), 6),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        self.elements.append(table)
        self.elements.append(Spacer(1, 12))

    def generate(self):
        self.doc.build(self.elements)

def generate_report(scan_id, output_filename):
    report = Report(output_filename)
    
    # get scan information from database
    scan = get_scan_by_id(scan_id)
    if not scan:
        raise ValueError(f"The scan record with ID {scan_id} was not found.")

    # add report title
    report.add_title("Pentest Report")

    # add scan information
    report.add_heading("Scan information")
    report.add_paragraph(f"target IP: {scan.target_ip}")
    report.add_paragraph(f"scan time: {scan.timestamp}")
    report.add_paragraph(f"scan status: {scan.status}")
    report.add_paragraph(f"result summary: {scan.result_summary}")

    # add vulnerabilities found
    vulnerabilities = get_vulnerability_by_scan_id(scan_id)
    report.add_heading("Vulnerabilities found")
    
    if vulnerabilities:
        vuln_data = [["description", "severity", "mitigation"]]
        for vuln in vulnerabilities:
            vuln_data.append([vuln.description, vuln.severity, vuln.mitigation])
        report.add_table(vuln_data, [200, 100, 200])
    else:
        report.add_paragraph("No vulnerabilities were detected in this scan.")

    # generate report
    report.generate()

    return output_filename

# use case
# generate_report(1, "penetration_test_report.pdf")
