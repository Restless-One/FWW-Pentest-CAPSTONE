from . import db


class Scan(db.Model):
    __tablename__ = 'scans'

    id = db.Column(db.Integer, primary_key=True)
    timestamp = db.Column(db.DateTime, nullable=False)
    target_ip = db.Column(db.String(15), nullable=False)
    result_summary = db.Column(db.String(500), nullable=False)
    status = db.Column(db.String(50), nullable=False)

    vulnerabilities = db.relationship('Vulnerability', backref='scan', lazy=True)

    def __repr__(self):
        return f'<Scan{self.id}, {self.target_ip}>'


class Vulnerability(db.Model):
    __tablename__ = 'vulnerabilities'

    id = db.Column(db.Integer, primary_key=True)
    scan_id = db.Column(db.Integer, db.ForeignKey('scans.id'), nullable=False)
    description = db.Column(db.String(500), nullable=False)
    severity = db.Column(db.String(50), nullable=False)
    mitigation = db.Column(db.String(500), nullable=False)

    def __repr__(self):
        return f'<Vulnerability{self.vu_Id}, {self.severity}>'


def add_scan(target_ip, result_summary, status, timestamp):
    new_scan = Scan(target_ip=target_ip, result_summary=result_summary, status=status, timestamp=timestamp)
    db.session.add(new_scan)
    db.session.commit()
    return new_scan


def add_vulnerability(scan_id, description, severity, mitigation):
    new_vulnerability = Vulnerability(scan_id=scan_id, description=description, severity=severity,
                                      mitigation=mitigation)
    db.session.add(new_vulnerability)
    db.session.commit()
    return new_vulnerability


def get_all_scans():
    return Scan.query.all()


def get_all_vulnerabilities():
    return Vulnerability.query.all()


def get_scan_by_id(scan_id):
    return Scan.query.get(scan_id)


def get_vulnerability_by_scan_id(scan_id):
    return Vulnerability.query.filter_by(scan_id=scan_id).all()


def get_scan_summary_dashboard():
    summary_dashboard = db.session.query(Scan.id, Scan.target_ip, Scan.status, db.func.count(Vulnerability.id).label('vuln_count')).outerjoin(Vulnerability).group_by(Scan.id).all()
    return summary_dashboard
