from . import db
from sqlalchemy import func, extract, case
from datetime import datetime, date


class Scan(db.Model):
    __tablename__ = 'scans'

    id = db.Column(db.Integer, primary_key=True)
    timestamp = db.Column(db.DateTime, nullable=False)
    target_ip = db.Column(db.String(15), nullable=False)
    result_summary = db.Column(db.String(500), nullable=False)
    status = db.Column(db.String(50), nullable=False)

    vulnerabilities = db.relationship('Vulnerability', backref='scan', lazy=True)

    def __repr__(self):
        return f'<Scan{self.id}, {self.target_ip}>'

    def to_dict(self):
        return {
            'id': self.id,
            'timestamp': self.timestamp,
            'target_ip': self.target_ip,
            'result_summary': self.result_summary,
            'status': self.status
        }


class Vulnerability(db.Model):
    __tablename__ = 'vulnerabilities'

    id = db.Column(db.Integer, primary_key=True)
    scan_id = db.Column(db.Integer, db.ForeignKey('scans.id'), nullable=False)
    description = db.Column(db.String(500), nullable=False)
    severity = db.Column(db.String(50), nullable=False)
    mitigation = db.Column(db.String(500), nullable=False)

    def __repr__(self):
        return f'<Vulnerability{self.vu_Id}, {self.severity}>'

    def to_dict(self):
        return {
            'id': self.id,
            'scan_id': self.scan_id,
            'description': self.description,
            'severity': self.severity,
            'mitigation': self.mitigation
        }


def add_scan(target_ip, result_summary, status, timestamp):
    new_scan = Scan(target_ip=target_ip, result_summary=result_summary, status=status, timestamp=timestamp)
    db.session.add(new_scan)
    db.session.commit()
    return new_scan


def add_vulnerability(scan_id, description, severity, mitigation):
    new_vulnerability = Vulnerability(scan_id=scan_id, description=description, severity=severity,
                                      mitigation=mitigation)
    db.session.add(new_vulnerability)
    db.session.commit()
    return new_vulnerability


def get_all_scans():
    return Scan.query.all()


def get_all_vulnerabilities():
    return Vulnerability.query.all()


def get_scan_by_id(scan_id):
    return Scan.query.get(scan_id)


def get_vulnerability_by_scan_id(scan_id):
    return Vulnerability.query.filter_by(scan_id=scan_id).all()


def get_scan_summary_dashboard():
    summary_dashboard = db.session.query(Scan.id, Scan.target_ip, Scan.status, db.func.count(Vulnerability.id).label('vuln_count')).outerjoin(Vulnerability).group_by(Scan.id).all()
    return summary_dashboard


def get_scans_by_date_range(start_date, end_date):
    return Scan.query.filter(Scan.timestamp.between(start_date, end_date)).all()


def get_scans_current_year():
    current_year = datetime.now().year
    start_date = date(current_year, 1, 1)
    end_date = datetime.now()
    return get_scans_by_date_range(start_date, end_date)


def get_scans_current_month():
    current_date = datetime.now()
    start_date = date(current_date.year, current_date.month, 1)
    return get_scans_by_date_range(start_date, current_date)


def get_total_scan_count():
    return Scan.query.count()


def get_total_vulnerability_count():
    try:
        return Vulnerability.query.count()
    except Exception as e:
        print(f"Error getting total vulnerability count: {str(e)}")
        return 0


def get_vulnerability_count_by_severity():
    return db.session.query(
        Vulnerability.severity,
        func.count(Vulnerability.id).label('count')
    ).group_by(Vulnerability.severity).all()


def get_scan_count_by_status():
    return db.session.query(
        Scan.status,
        func.count(Scan.id).label('count')
    ).group_by(Scan.status).all()


def get_critical_vulnerability_count():
    return Vulnerability.query.filter_by(severity='Critical').count()


def get_monthly_vulnerability_counts(year):
    current_month = datetime.now().month if datetime.now().year == year else 12
    
    monthly_counts = db.session.query(
        func.extract('month', Scan.timestamp).label('month'),
        func.count(Vulnerability.id).label('total_vulnerabilities'),
        func.sum(case((Vulnerability.severity == 'Critical', 1), else_=0)).label('critical_issues')
    ).join(Vulnerability).filter(
        extract('year', Scan.timestamp) == year,
        extract('month', Scan.timestamp) <= current_month
    ).group_by(
        func.extract('month', Scan.timestamp)
    ).all()
    
    result = []
    for month in range(1, current_month + 1):
        month_data = next((item for item in monthly_counts if item.month == month), None)
        if month_data:
            result.append({
                'month': month,
                'total_vulnerabilities': month_data.total_vulnerabilities,
                'critical_issues': month_data.critical_issues
            })
        else:
            result.append({
                'month': month,
                'total_vulnerabilities': 0,
                'critical_issues': 0
            })
    
    return result