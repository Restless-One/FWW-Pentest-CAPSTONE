from flask import jsonify, request, send_file, abort
from database.database import (
    get_all_scans, get_all_vulnerabilities, Scan, Vulnerability, 
    get_scan_by_id, get_vulnerability_by_scan_id, get_scans_current_year,
    get_scans_current_month, get_total_scan_count, get_total_vulnerability_count,
    get_vulnerability_count_by_severity, get_scan_count_by_status,
    get_monthly_vulnerability_counts, get_critical_vulnerability_count,
    get_scans_by_date_range
)
from db_test.db_test import DatabaseTest
from . import route_bp
from report.report import generate_report
import os
from datetime import datetime

# main page
@route_bp.route('/')
def index():
    return "Welcome to the Dashboard"

# scan page
@route_bp.route('/scan', methods=['GET'])
def get_scans():
    scans = Scan.query.all()
    result = []
    for scan in scans:
        result.append({
            'id': scan.id,
            'timestamp': scan.timestamp,
            'target_ip': scan.target_ip,
            'result_summary': scan.result_summary,
            'status': scan.status
        })
    return jsonify(result), 200

# vulnerability page
@route_bp.route('/vulnerabilities', methods=['GET'])
def get_vulnerabilities():
    vulnerabilities = get_all_vulnerabilities()
    result = []
    for vuln in vulnerabilities:
        result.append({
            'id': vuln.id,
            'scan_id': vuln.scan_id,
            'description': vuln.description,
            'severity': vuln.severity,
            'mitigation': vuln.mitigation
        })
    return jsonify(result), 200

# scan test page
@route_bp.route('/test_add_scan', methods=['POST'])
def test_add_scan():
    data = request.get_json()
    result, status_code = DatabaseTest.test_add_scan(data)
    return jsonify(result), status_code

# vulnerability test page
@route_bp.route('/test_add_vulnerability', methods=['POST'])
def test_add_vulnerability():
    data = request.get_json()
    result, status_code = DatabaseTest.test_add_vulnerability(data)
    return jsonify(result), status_code

# generate report page
@route_bp.route('/generate_report/<int:scan_id>', methods=['GET'])
def create_report(scan_id):
    report_filename = generate_report(scan_id, f"report_{scan_id}.pdf")
    return jsonify({"message": "Report generated successfully.", "filename": report_filename}), 200

# add report page
@route_bp.route('/report/<int:scan_id>', methods=['GET'])
def get_report(scan_id):
    report_filename = f"report_{scan_id}.pdf"
    report_path = os.path.join(os.getcwd(), report_filename)
    
    # if report not exist, generate it first
    if not os.path.exists(report_path):
        generate_report(scan_id, report_filename)
    
    # send report file
    return send_file(report_path, as_attachment=True)

# New: Get a single scan record
@route_bp.route('/scan/<int:scan_id>', methods=['GET'])
def get_scan(scan_id):
    scan = get_scan_by_id(scan_id)
    if scan:
        return jsonify({
            'id': scan.id,
            'timestamp': scan.timestamp,
            'target_ip': scan.target_ip,
            'result_summary': scan.result_summary,
            'status': scan.status
        }), 200
    else:
        abort(404, description="Scan not found")

# New: Get all vulnerabilities for a specific scan
@route_bp.route('/scan/<int:scan_id>/vulnerabilities', methods=['GET'])
def get_scan_vulnerabilities(scan_id):
    vulnerabilities = get_vulnerability_by_scan_id(scan_id)
    result = []
    for vuln in vulnerabilities:
        result.append({
            'id': vuln.id,
            'description': vuln.description,
            'severity': vuln.severity,
            'mitigation': vuln.mitigation
        })
    return jsonify(result), 200

# New: General query interface
@route_bp.route('/query', methods=['POST'])
def query_data():
    data = request.get_json()
    model = data.get('model')
    filters = data.get('filters', {})
    
    if model == 'Scan':
        query = Scan.query
    elif model == 'Vulnerability':
        query = Vulnerability.query
    else:
        abort(400, description="Invalid model specified")
    
    for key, value in filters.items():
        if hasattr(eval(model), key):
            query = query.filter(getattr(eval(model), key) == value)
    
    results = query.all()
    return jsonify([item.to_dict() for item in results]), 200

# New: Get scans for the current year
@route_bp.route('/scans/current_year', methods=['GET'])
def get_scans_this_year():
    scans = get_scans_current_year()
    return jsonify([scan.to_dict() for scan in scans]), 200

# New: Get scans for the current month
@route_bp.route('/scans/current_month', methods=['GET'])
def get_scans_this_month():
    scans = get_scans_current_month()
    return jsonify([scan.to_dict() for scan in scans]), 200

# New: Get statistics
@route_bp.route('/stats', methods=['GET'])
def get_stats():
    stats = {
        'total_scans': get_total_scan_count(),
        'total_vulnerabilities': get_total_vulnerability_count(),
        'vulnerabilities_by_severity': dict(get_vulnerability_count_by_severity()),
        'scans_by_status': dict(get_scan_count_by_status())
    }
    return jsonify(stats), 200

# New: Get scans by date range
@route_bp.route('/scans/by_date_range', methods=['GET'])
def get_scans_by_date_range_route():
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    
    if not start_date or not end_date:
        abort(400, description="Start date and end date are required")
    
    try:
        start_date = datetime.strptime(start_date, '%Y-%m-%d')
        end_date = datetime.strptime(end_date, '%Y-%m-%d')
    except ValueError:
        abort(400, description="Invalid date format. Use YYYY-MM-DD")
    
    scans = get_scans_by_date_range(start_date, end_date)
    return jsonify([scan.to_dict() for scan in scans]), 200

# New: Get dashboard summary
@route_bp.route('/dashboard/summary', methods=['GET'])
def get_dashboard_summary():
    total_vulnerabilities = get_total_vulnerability_count()
    critical_issues = get_critical_vulnerability_count()
    total_scans = get_total_scan_count()
    
    return jsonify({
        'total_vulnerabilities': total_vulnerabilities,
        'critical_issues': critical_issues,
        'total_scans': total_scans
    }), 200

# New: Get vulnerability severity distribution
@route_bp.route('/dashboard/vulnerability_severity', methods=['GET'])
def get_vulnerability_severity_distribution():
    severity_distribution = get_vulnerability_count_by_severity()
    # Convert the query results into a serializable dictionary
    result = {item.severity: item.count for item in severity_distribution}
    return jsonify(result), 200

# New: Get monthly vulnerability statistics
@route_bp.route('/dashboard/monthly_vulnerability_counts', methods=['GET'])
def get_monthly_vulnerability_data():
    current_year = datetime.now().year
    monthly_data = get_monthly_vulnerability_counts(current_year)
    return jsonify(monthly_data), 200