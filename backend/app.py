from flask import Flask, jsonify
from flask_restx import Api, Resource
from database import db
from routes import route_bp
from database.database import add_scan, add_vulnerability, Vulnerability
from datetime import datetime
from sqlalchemy import inspect
from flask_cors import CORS


app = Flask(__name__)
CORS(app)

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///pentest.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)

# Initialize Flask-RESTX
api = Api(app, version='1.0', title='Pentest API',
    description='A simple pentest API',
    doc='/swagger/',  # Swagger UI will be available at /swagger/
    prefix='/api'  # All API routes will start with /api
)

# Ensure the blueprint is still registered
app.register_blueprint(route_bp)

# Wrap existing routes into Flask-RESTX resources
@api.route('/scan')
class ScanList(Resource):
    def get(self):
        return route_bp.get_scans()

@api.route('/vulnerabilities')
class VulnerabilityList(Resource):
    def get(self):
        return route_bp.get_vulnerabilities()

@api.route('/test_add_scan')
class TestAddScan(Resource):
    def post(self):
        return route_bp.test_add_scan()

@api.route('/test_add_vulnerability')
class TestAddVulnerability(Resource):
    def post(self):
        return route_bp.test_add_vulnerability()

@api.route('/generate_report/<int:scan_id>')
class GenerateReport(Resource):
    def get(self, scan_id):
        return route_bp.create_report(scan_id)

@api.route('/report/<int:scan_id>')
class GetReport(Resource):
    def get(self, scan_id):
        return route_bp.get_report(scan_id)

@api.route('/scan/<int:scan_id>')
class Scan(Resource):
    def get(self, scan_id):
        return route_bp.get_scan(scan_id)

@api.route('/scan/<int:scan_id>/vulnerabilities')
class ScanVulnerabilities(Resource):
    def get(self, scan_id):
        return route_bp.get_scan_vulnerabilities(scan_id)

@api.route('/query')
class Query(Resource):
    def post(self):
        return route_bp.query_data()

@api.route('/scans/current_year')
class ScansCurrentYear(Resource):
    def get(self):
        return route_bp.get_scans_this_year()

@api.route('/scans/current_month')
class ScansCurrentMonth(Resource):
    def get(self):
        return route_bp.get_scans_this_month()

@api.route('/stats')
class Stats(Resource):
    def get(self):
        return route_bp.get_stats()

@api.route('/scans/by_date_range')
class ScansByDateRange(Resource):
    def get(self):
        return route_bp.get_scans_by_date_range_route()

@api.route('/dashboard/summary')
class DashboardSummary(Resource):
    def get(self):
        return route_bp.get_dashboard_summary()

@api.route('/dashboard/vulnerability_severity')
class VulnerabilitySeverity(Resource):
    def get(self):
        return route_bp.get_vulnerability_severity_distribution()

@api.route('/dashboard/monthly_vulnerability_counts')
class MonthlyVulnerabilityCounts(Resource):
    def get(self):
        return route_bp.get_monthly_vulnerability_data()

# Add a test route
@app.route('/test')
def test():
    return "This is a test route"

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
        
        inspector = inspect(db.engine)
        tables = inspector.get_table_names()
        print("Created tables:", tables)

        scan1 = add_scan("192.168.1.100", "Found 3 medium-risk vulnerabilities", "Completed", datetime.now())
        scan2 = add_scan("10.0.0.5", "Found 1 critical vulnerability and 2 low-risk vulnerabilities", "In Progress", datetime.now())

        # Add vulnerability records
        add_vulnerability(scan1.id, "SQL Injection Vulnerability", "High", "Use parameterized queries and input validation")
        add_vulnerability(scan1.id, "Cross-Site Scripting (XSS) Vulnerability", "Medium", "Properly escape and filter user inputs")
        add_vulnerability(scan2.id, "Remote Code Execution Vulnerability", "Critical", "Promptly update systems and applications, and restrict remote access")

        try:
            result = db.session.execute(db.select(Vulnerability)).fetchall()
            print("Successfully queried Vulnerability table")
        except Exception as e:
            print(f"Error querying Vulnerability table: {str(e)}")
        
        print("Registered routes:")
        for rule in app.url_map.iter_rules():
            print(f"{rule.endpoint}: {rule.rule}")
    
    app.run(debug=True)